// O(n^3)

class Pair {
public:
    int index;
    int value;
    
    Pair(int index, int value) {
        this->index = index;
        this->value = value;
    }
    
    bool operator < (const Pair& p) const {
        return (value < p.value);
    }
};

class Solution {
public:
    int sumSubarrayMins(vector<int>& A) {
        vector<Pair> pairList;
        vector<vector<bool>> levelWindow;
        int mod = myPow(10, 9) + 7;
        int sum = 0;
        int restTimes = ((A.size() + 1) * A.size()) / 2 - A.size(); // total - first level
        
        // init
        for (int i = 0; i < A.size(); i++) { // O(n)
            Pair newPair(i, A[i]);
            pairList.push_back(newPair);
            
            // init limit for each level
            vector<bool> newLevel(A.size() - i, true);
            levelWindow.push_back(newLevel);
            sum += A[i];
        }
        
        sort(pairList.begin(), pairList.end()); // O(nlogn)
        
        
        for (int i = 0; i < pairList.size() && restTimes > 0; i++) {
            int times = 0;
            for (int lev = 1; lev < levelWindow.size(); lev++) {
                int windowStartIdx = (pairList[i].index - lev > 0) ? pairList[i].index - lev : 0;
                while (windowStartIdx + lev + 1 <= A.size()) {
                    if(levelWindow[lev][windowStartIdx]) {
                        levelWindow[lev][windowStartIdx] = false;
                        times += 1;
                    }
                    if (windowStartIdx == pairList[i].index) break;
                    windowStartIdx++;
                } 
            }
            restTimes -= times;
            sum += (times * pairList[i].value) % mod;
            sum %= mod;
        }
        return sum;
    }
    
    int myPow(int x, int p) {
      if (p == 0) return 1;
      if (p == 1) return x;

      int tmp = myPow(x, p/2);
      if (p%2 == 0) return tmp * tmp;
      else return x * tmp * tmp;
    }
};
